<usermanual>
______________________________________________________________________________________________________________

									Reversal Learning Task
______________________________________________________________________________________________________________

by Sophie Paolizzi and Olivia Katsoudas
DEPENd lab
University of North Carolina, Chapel Hill
last updated on 12th Dec 2020
______________________________________________________________________________________________________________

									BACKGROUND INFO 
______________________________________________________________________________________________________________
This task has been utilized on several grants in the lab using an EPrime file. 
This version of the task will run in an online experiment collected as part of the PUBS study in Summer 2021. 

References:	

_____________________________________________________________________________________________________________
									
									TASK DESCRIPTION		
_____________________________________________________________________________________________________________
 
______________________________________________________________________________________________________________
									
									PARAMETERS TO INITIALIZE
______________________________________________________________________________________________________________
numTrialEachBlock:    				Number of trials in each block, one face shown per block
									Each block has one response strategy among: goToWin, noGoToWin, goToAvoid, noGoToAvoid
faceDuration:						(in ms) Amount of time that the stimuli (face) is shown
stimulusAndFeedbackGapDuration:		(in ms) Time after stimulus presentation is stopped and before feedback is shown
feedbackDuration: 					(in ms) Amount of time the feedback is shown
ITI: 								(in ms) Inter trial time - pause after showing feedback is stopped and before the next stimuli is presented
___________________________________________________________________________________________________________
									
									OUTPUT DATA FILE INFORMATION
______________________________________________________________________________________________________________
blockName:							Condition for the current block, options: practice, goToWin, noGoToWin, goToAvoid, noGoToAvoid 
faceName:							The name of the file with teh face used as stimuli for the current trial
trialCounter:  					 	The number of the current trial in a particular block
experimentName:						"Neighborhood"
responseName:						Used to save instead the name like "space" or "none" instead of keyboard scancodes used by Inquisit
responseTime:						When space is pressed the time of response after stimulus presentation, NA if no response was given
isResponseCorrect:					+1 = if the response for a trial is correct, -1 = if the response is incorrect
isFeedbackAccurate:					+1 = if the feedback given to participant is accurate based on their response and the block condition
									-1 = if the feedback given to participant is opposite what would had been the correct feedback based on their response and the block condition
trial_SIS:							+1 = if SIS (social influence score) goes up, feedback shown = up arrow;
									0 = if SIS remains constant wrt previous trial, feedback shown = neutral sign;
								    -1 = if SIS decreases, feddback shown = down arrow;
blockTotal_SIS:						Running sum of trial_SIS for each block
SIS_toFillMeterOnRightTime:			Same as blockTotal_SIS, set to this value when feedback is given to match the timing of feedback and change in social influence meter

</usermanual>

**************************************************************************************************************
Defining background 
**************************************************************************************************************
<defaults>
/ fontstyle = ("Arial", 3.5%, false, false, false, false, 5, 1)
/ screencolor = white
/ txbgcolor = white
/ txcolor = black
/ minimumversion = "6.1.0.0"
/ canvasaspectratio = (4, 3) 
</defaults>

**************************************************************************************************************
Initializing the parameters 
**************************************************************************************************************
// Parameters to be fixed before the experiment
<parameters>
/ numTrialEachBlock = 40     			// Number of trials in each block
/ StimDuration = 1000 					// (in ms) Amount of time that the stimuli is shown
/ stimulusAndFeedbackGapDuration = 500  // (in ms) Time after stimulus presentation is stopped and before feedback is shown
/ feedbackDuration = 1000 				// (in ms) Amount of time the feedback is shown
/ ITI = 2000 							// (in ms) Inter trial time - pause after showing feedback is stopped and before the next stimuli is presented
/ maxStimDuration =  2000
/leftKey = 33
/rightKey = 36
</parameters>
      
**************************************************************************************************************
Values which will be updated during the trials
**************************************************************************************************************	    
<values> 
/ instructionIndex = 0                  // Used for choosing the next set of instructions in the initial "instructions" block
/ practiceInstructionIndex = 0          // Used for choosing the next set of instructions in the initial "practice" block
/ block_number = 0     					// Counts the current block number, used for choosing the instructions at the begining of each block
				// Used to select the left stimulus which will be shown in each block	
				// Used to select the right stimulus which will be shown in each block	
/ percentTrialsCorrectFeedback_correctStim = 1	  // Percent of trials in each block that will show the appropriate feedback based on the response for the left stimulus
/ percentTrialsCorrectFeedback_incorrectStim = 0    // Percent of trials in each block that will show the appropriate feedback based on the response for the right stimulus
/ percentTrialsCorrectFeedback_pen = 1	  // Percent of trials in each block that will show the appropriate feedback based on the response for the left stimulus
/ percentTrialsCorrectFeedback_dandelion = 0    // Percent of trials in each block that will show the appropriate feedback based on the response for the right stimulus
/ responseAndFeedbackCategory = "" 		// For each trial it stores the combination of correct/incorrect response with correct/incorrect feedback, to choose the correct feedback
										// "CRCF" = correct response, correct feedback; "IRCF" = incorrect response, correct feedback
										// "CRIF" = correct response, incorrect feedback; "IRIF" = incorrect response, incorrect feedback
/ isThisTrialPractice = 1 				// 1 = pratice block and 0 = actual experiment block, used in the trials to choose if it is a practice block 
/ experimentName = "Reversal_Task"
/ isResponseCorrect = 0					// +1 = if the response for a trial is correct, -1 = if the response is incorrect
/ isFeedbackAccurate = 0				// +1 = if the feedback given to participant is accurate based on their response and the block condition
										// -1 = if the feedback given to participant is opposite what would had been the correct feedback based on their response and the block condition
/ trial_number = 0						// trial number (updates by block)
/ SIS_toFillMeterOnRightTime = 0 		// same as blockTotal_SIS, set to this value when feedback is given to match the timing of feedback and change in social influence meter
/ numbercorrectfeedback = 0 
/ numberoftimesleft = 0
/ numberoftimesright = 0
/ rightleftcorrect = "left"
/ reversalnumber = 1
/ totalcorrect = 0
/ totalearnings = 0
/ blockNumber = 0
/ consecutivecorrect = 0
/ task_phase = "Practice"
/ total_trialnum = 0
/ rt =  0

/correctChoicePosition = 0
/correctKey = 36
/incorrectKey = 33

/index_correctChoice = 0
/index_incorrectChoice = 0
/correct_holding = 0
</values>

**************************************************************************************************************
Expressions of importance
**************************************************************************************************************
<expressions>
/ centsearned = values.numbercorrectfeedback *.5
/ percentTrialsCorrectFeedback_correctStim = 1 - values.percentTrialsCorrectFeedback_correctStim
/ percentTrialsCorrectFeedback_incorrectStim = 1 - values.percentTrialsCorrectFeedback_incorrectStim
/ totalcorrect = values.totalcorrect + values.numbercorrect
/ totalearnings  = values.totalcorrect*.5
</expressions>

**************************************************************************************************************
Output data file columns
**************************************************************************************************************
<data>
/ columns = (build, values.experimentName, subject, date, time, trialcode, blockcode, stimulusitem,
trial.choice.percentcorrect, //running tally of percentage of correct trials
trial.choice.latency, //reaction time (rt)) 
trial.choice.response, // response (key number)
picture.correctStim.currentvalue, //current number of current left picture
picture.incorrectStim.currentvalue, //current number of current right picture
values.block_number, // number of block (1-3 == datacollection, 4 == feedback)
values.task_phase, // Reversal or Acquisiton?
values.index_correctChoice, // number of times pts selected left side (by block)
values.index_incorrectChoice, // number of times pts selected right side (by block)
values.correctChoicePosition,
values.correctKey,
values.incorrectKey,
values.percentTrialsCorrectFeedback_correctStim, // current percentage of rewarding trials for left 
values.percentTrialsCorrectFeedback_incorrectStim, // current percentage of rewarding trials for left 
values.responseAndFeedbackCategory,	// CRCF, IRCF, CRIF, IRIF. Same indo as isResponseCorrect and isFeedbackAccurate. 								
values.isThisTrialPractice, // was this trial a practice or real trial?
values.isResponseCorrect, // did they get the right answer?
values.isFeedbackAccurate, // was the probabilisitc feedback accurate?
values.trial_number, // what is the trial number? (resets by block) 
values.total_trialnum, // total trials
values.numbercorrectfeedback, // how many have they gotten right? (total)
values.totalcorrect // how many correct overall
values.rightleftcorrect, //is the right or left stimulus currently correct?
values.consecutivecorrect, // how many have people gotten right in a row?
values.reversalnumber, // when will reversal occur for this block?
expressions.totalearnings, // how much have they earned in the task? (tallied at the end of a block))
expressions.centsearned) //how much have they earned in the block? (running tally))
</data>

**************************************************************************************************************
Creating stimuli 
**************************************************************************************************************

<item Stimuli>
// Stimuli used in trial blocks
/ 1 = "dandelion.bmp"
/ 2 = "pen.bmp"
/ 3 = "kettle.bmp"
/ 4 = "carriage.bmp"
/ 5 = "truck.bmp"
/ 6 = "fan.bmp"
/ 7 = "watermelon.bmp"
/ 8 = "skate.bmp"
/ 9 = "binocular.bmp"
/ 10 = "wheelbarrow.bmp"
/ 11 = "brush.bmp"
/ 12 = "wrench.bmp"
/ 13 = "wrench.bmp"
/ 14 = "house.bmp"
/ 15 = "orange.bmp"
/ 16 = "pear.bmp"
/ 17 = "pinecone.bmp"
/ 18 = "cactus.bmp"
/ 19 = "anchor.bmp"
/ 20 = "ship.bmp"
/ 21 = "telescope.bmp"
/ 22 = "globe.bmp"
/ 23 = "leaf.bmp"
/ 24 = "tree.bmp"
/ 25 = "lamb.bmp"
/ 26 = "owl.bmp"
/ 27 = "lighthouse.bmp"
/ 28 = "plane.bmp"
/ 29 = "light.bmp"
/ 30 = "clipboard.bmp"
/ 31 = "keys.bmp"
/ 32 = "dinosaur.bmp"
/ 33 = "elk.bmp"
/ 34 = "frog.bmp"
/ 35 = "snail.bmp"
/ 36 = "books.bmp"
/ 37 = "car.bmp"
/ 38 = "lightbulb.bmp"
/ 39 = "umbrella.bmp"
/ 40 = "sun.bmp"
/ 41 = "clouds.bmp"
/ 42 = "arc.bmp"
</item>


<list hpositions>
/ items = (25, 75)
/ replace = false
/ resetinterval = 0
/ selectionrate = always

</list>

<list practiceitemnumbers>
/ items = (1-2)
/ replace = false
/ resetinterval = 0
/ selectionrate = always
/ selectionmode = random
</list>

<list itemnumbers>
/ items = (3-42)
/ replace = false
/ resetinterval = 0
/ selectionrate = always
/ selectionmode = random
</list>



<picture correctStim>
/ items = Stimuli
/ vposition = 50
/ size = (300, 300) // in pixels
/ select = values.index_correctChoice
/ erase = false
</picture>

<picture incorrectStim>
/ items = Stimuli
/ vposition = 50
/ size = (300, 300) // in pixels
/ select = values.index_incorrectChoice
/ erase = false
</picture>

<picture photoBorder_left>
/ items = ("Photo_border.png")
/ position = (25, 50)
/ size = (400, 400))

</picture>

<picture photoBorder_right>
/ items = ("Photo_border.png")
/ position = (75, 50)
/ size = (400, 400)

</picture>

**************************************************************************************************************
Creating feedback stimuli 
**************************************************************************************************************
<text Correct_feedback>
/ items = ("CORRECT~n +5")
/ fontstyle = ("Arial", 5%, true, false, false, false, 5, 1)
/ position = (50%, 80%)
/ size = (80%, 20%)
/ vjustify = center
/ valign = center
/ halign = center
/ txcolor = green
</text>

<text Incorrect_feedback>
/ items = ("INCORRECT ~n + 0")
/ fontstyle = ("Arial", 5%, true, false, false, false, 5, 1)
/ position = (50%, 80%)
/ size = (80%, 20%)
/ vjustify = center
/ valign = center
/ halign = center
/ txcolor = red
</text>

<text No_response>
/ items = ("NO RESPONSE")
/ fontstyle = ("Arial", 5%, true, false, false, false, 5, 1)
/ position = (50%, 80%)
/ size = (80%, 20%)
/ vjustify = center
/ valign = center
/ halign = center
/ txcolor = dimgray
</text>

**************************************************************************************************************
Globally Useful Elements
**************************************************************************************************************

<text Spacetocontinue>
/ items = ("Press SPACE to continue")
/ fontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
/ position = (50%, 85%)
/ valign = center
/ halign = center
/ select = sequence
</text>

<text fixation>
/ items = ("+")
/ fontstyle = ("Arial", 10%, true, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (80%, 80%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

<text spaceBarBeginTrial>
/ items = ("Press the SPACEBAR when you are ready to begin!")
/ fontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
/ position = (50%, 80%)
/ size = (80%, 5%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

<text howyoudid>
/ items = ("You earned <%expressions.centsearned%> cents in this block!")
/ fontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (80%, 80%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

**************************************************************************************************************
Instructions for explanation of experiment
**************************************************************************************************************
<text Begin_task>
/ items = welcometotask
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 1)
/ position = (50%, 90%)
/ size = (80%, 5%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

<item welcometotask>
/1 = "This is the beginning of the CHOICE TASK."
/2 = "In this game, two pictures will always appear side by side on the computer screen. 
~n Like this...."
</item>

<text welcometoTask>
/ items = welcometotask
/ fontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (90%, 90%)
/ vjustify = center
/ valign = center
/ halign = center
/ select = sequence
</text>

<item introInstructions>
/ 1 = "In the beginning, one of the pictures will be randomly chosen as CORRECT,
~n and one will be INCORRECT. At first you won't know which is which. 
~n Using the computer's feedback, try to guess which picture is correct."

/ 2 = "It does NOT matter on what side the picture is. 
~nPress the F key to select the picture on the left. 
~nPress the J key to select the picture on the right."

/ 3 = "Occasionally, the computer will give you wrong feedback: 
~n you might be told you are INCORRECT when you choose the CORRECT picture."

/ 4 = "Try your best to pick the picture that you think has the highest chance 
~n of being correct. You will earn .5 cents for each CORRECT choice."

/ 5 = "To make the test trickier, 
~n the correct picture will change every now and then."

/ 6 = "When you feel like the correct picture has changed, 
~n you should start choosing the other picture."

/ 7 = "You will only have a few seconds to make your selection. 
~n If you are too slow, you will not earn any money."

/8 = "Just to be sure it makes sense, let's play a quick practice round."

</item>

<text introInstructions>
/ items = introInstructions
/ fontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (90%, 90%)
/ vjustify = center
/ valign = center
/ halign = center
/ select = values.instructionIndex
</text>

<text PressPen>
/ items = ("This time, the PEN stimulus will be correct. Press the PEN to earn a reward.")
/ fontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (90%, 90%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

<text PressDandelion>
/ items = ("This time, the DANDELION stimulus will be correct. Press the DANDELION to earn a reward.")
/ fontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (80%, 80%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

<trial PressPen>
/ stimulusframes = [1=text.PressPen, Spacetocontinue]
/ correctresponse = (57)
/ recorddata = false
/ ontrialbegin = [
	values.percentTrialsCorrectFeedback_correctStim = 1;
	values.percentTrialsCorrectFeedback_incorrectStim= 0;
]
</trial>

<trial PressDandelion>
/ stimulusframes = [1=text.PressDandelion, Spacetocontinue]
/ correctresponse = (57)
/ recorddata = false
/ ontrialbegin = [
	values.totalcorrect = expressions.totalcorrect;
	values.totalearnings = expressions.centsearned;
	values.index_correctChoice = 1;
	values.index_incorrectChoice = 2;
	list.CorrectPicture.reset();
]
/ ontrialend = [
	values.numbercorrectfeedback = 0;
	values.numberoftimesleft = 0;
	values.numberoftimesright = 0;
]

</trial>

<text practiceBeginInstruction>
/ items = ("PRACTICE ROUND")
/ fontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (70%, 70%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

<trial practiceBeginInstruction>
/ stimulusframes = [1=practiceBeginInstruction, spaceBarBeginTrial]
/ validresponse = (57)
/ correctresponse = ( 57)
/ recorddata = false
</trial>

<trial introInstructions>
/ ontrialbegin = [
	values.instructionIndex += 1;
]
/ stimulusframes = [1=introInstructions, Spacetocontinue]
/ correctresponse = ( 57)
/ recorddata = false
/ beginresponsetime = 500
</trial>

<trial welcometoTask>
/ stimulusframes = [1= welcometoTask, Spacetocontinue]
/ correctresponse = ( 57)
/ recorddata = false
</trial>

<trial presentation>
/ stimulusframes = [1 = picture.correctStim, picture.incorrectStim]
/ trialduration = 1500
</trial>
 
**************************************************************************************************************
Blocks for practice
**************************************************************************************************************

<block introInstructions>
/ trials = [
	1-8 = introInstructions;
]
/ responsemode = correct
/ recorddata = false
</block>

<block practice_trial>
/ onblockbegin = [
	values.index_correctChoice = 2;
	values.index_incorrectChoice = 1;
	picture.correctStim.hposition = 25;
	picture.incorrectStim.hposition = 75;
]
/ onblockend= [
	values.trial_number = 0;
	values.total_trialnum = 0;
	values.consecutivecorrect = 0;
]
/ trials = [
    1-2 = welcometoTask;
	3   =  presentation;
	4-10 = introInstructions;
	11 =  PressPen;
	12-14 = choice; 
	15   =  reset_trial;
	16   =  PressDandelion;
	17-19 = choice;
	20 = reset_trial; 
	21 = beginExperimentInstruction;
	]
/ responsemode = correct
/ recorddata = false
</block>

**************************************************************************************************************
Trials for reversal blocks
**************************************************************************************************************
<text choicetracker>
/ items = ("correct key is <%values.correctKey%>, incorrect key is <%values.incorrectKey%>, 
~n correct picture is <%values.index_correctChoice%>, incorrect picture is <%values.index_incorrectChoice%>, ")
/ fontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
/ position = (50%, 20%)
/ size = (50%, 20%)
/ vjustify = center
/ valign = center
/ halign = center
/ select = sequence

</text>


<trial choice>
/ ontrialbegin = [
	picture.correctStim.hposition = list.hpositions.nextvalue;
	if (picture.correctStim.hposition == 25){
		values.correctChoicePosition = 1;
		values.correctKey = parameters.leftKey;
		values.incorrectKey = parameters.rightKey;
	} else {
		values.correctChoicePosition = 2;
		values.correctKey = parameters.rightKey;
		values.incorrectKey = parameters.leftKey;
	};
	picture.incorrectStim.hposition = list.hpositions.nextvalue;

	if (values.trial_number < values.reversalnumber) {
		values.task_phase = "Acquisiton";
	} else if (values.trial_number >= values.reversalnumber) {
		values.task_phase = "Reversal";
	};
	values.total_trialnum += 1;
	
]

/ stimulusframes = [1 = picture.correctStim, picture.incorrectStim, choicetracker]
/ validresponse = (parameters.leftKey, parameters.rightKey) 
/ correctresponse = (values.correctKey, values.incorrectKey)
/ timeout = parameters.maxStimDuration
/ ontrialend = [
	if (list.CorrectPicture.nextvalue == 1) {
			if (trial.choice.response ==  values.correctKey) {
				values.responseAndFeedbackCategory = "CRCF";
				values.isResponseCorrect = 1;
				values.isFeedbackAccurate = 1;
				values.numberoftimesleft += 1;
			} else if (trial.choice.response ==  values.incorrectKey){
				values.responseAndFeedbackCategory = "IRIF";
				values.isResponseCorrect = -1;
				values.isFeedbackAccurate = 1;
				values.numberoftimesright += 1;
			} else if (trial.choice.timeout) {
				values.responseAndFeedbackCategory = "NRNF";
				values.isResponseCorrect = 0;
				values.isFeedbackAccurate = 1;
				values.rt = "NA";
			}
		} else if (list.CorrectPicture.nextvalue == 0) {
			if (trial.choice.response ==  values.correctKey) {
				values.responseAndFeedbackCategory = "CRIF";
				values.isResponseCorrect = 1;
				values.isFeedbackAccurate = -1;
				values.numberoftimesleft = values.numberoftimesleft + 1;
			} else if (trial.choice.response ==  values.incorrectKey){
				values.responseAndFeedbackCategory = "IRCF";
				values.isResponseCorrect = -1;
				values.isFeedbackAccurate = -1;
				values.numberoftimesright += 1;
			} else if (trial.choice.timeout) {
				values.responseAndFeedbackCategory = "NRNF";
				values.isResponseCorrect = 0;
				values.isFeedbackAccurate = 1;
			};
		};
		
		if (values.isThisTrialPractice == 0){
			values.trial_number += 1;
		};
		values.rt = trial.choice.latency;
]
 
/ branch = [
	if (trial.choice.response == parameters.leftKey){
		trial.stimulus_selection_left;
	} else if (trial.choice.response == parameters.rightKey){
        trial.stimulus_selection_right;
	} else if (trial.choice.timeout){
        trial.feedback_noresponse;
	} 
]
</trial>


<trial stimulus_selection_left> 
/ stimulusframes = [1 = picture.correctStim, picture.incorrectStim, photoBorder_left]
/ validresponse = (noresponse)
/ correctresponse = (noresponse)
/ trialduration = 100
/ recorddata = false
/ontrialbegin = [
	if (values.responseAndFeedbackCategory == "CRCF" || values.responseAndFeedbackCategory == "CRIF") {
		values.consecutivecorrect += 1;
		values.numbercorrect += 1;
		values.totalcorrect +1;
	} else if (values.responseAndFeedbackCategory == "IRCF" || values.responseAndFeedbackCategory == "IRIF") {
		values.consecutivecorrect = 0;
	} 
	]
/ branch = [
	if (values.responseAndFeedbackCategory == "CRCF" || values.responseAndFeedbackCategory == "IRCF") {
		trial.feedback_correct;
	} else if (values.responseAndFeedbackCategory == "CRIF" || values.responseAndFeedbackCategory == "IRIF") {
		trial.feedback_incorrect;
	} 
]
</trial>

<trial stimulus_selection_right> 
/ stimulusframes = [1 =  picture.correctStim, picture.incorrectStim, photoBorder_right]
/ validresponse = (noresponse)
/ correctresponse = (noresponse)
/ trialduration = 100
/ recorddata = false
/ontrialbegin = [
	if (values.responseAndFeedbackCategory == "CRCF" || values.responseAndFeedbackCategory == "CRIF") {
		values.consecutivecorrect += 1;
		values.numbercorrect += 1;
		values.totalcorrect +1;
	} else if (values.responseAndFeedbackCategory == "IRCF" || values.responseAndFeedbackCategory == "IRIF") {
		values.consecutivecorrect = 0;
	} 
	]
/ branch = [
	if (values.responseAndFeedbackCategory == "CRCF" || values.responseAndFeedbackCategory == "IRCF") {
		trial.feedback_correct;
	} else if (values.responseAndFeedbackCategory == "CRIF" || values.responseAndFeedbackCategory == "IRIF") {
		trial.feedback_incorrect;
	};
]
</trial>

<trial feedback_correct> 
/ stimulusframes = [1 = text.Correct_feedback, picture.correctStim, picture.incorrectStim ]
/ trialduration = 500
/ recorddata = false
/ ontrialbegin = [
	values.numbercorrectfeedback += 1;
]
/ branch = [
	trial.fixation
]
</trial>

<trial feedback_incorrect> 
/ stimulusframes = [1 = text.Incorrect_feedback, picture.correctStim, picture.incorrectStim]
/ trialduration = 500
/ recorddata = false
/ branch = [
	trial.fixation
]
</trial>

<trial feedback_noresponse> 
/ stimulusframes = [1 = picture.correctStim, picture.incorrectStim, text.No_response]
/ trialduration = 500
/ recorddata = false
/ ontrialbegin = [
	values.consecutivecorrect = 0;
]
/ branch = [
	trial.fixation
]
</trial>



<trial fixation>
/ stimulusframes = [1 = fixation]
/ trialduration = 100
/ ontrialbegin = [
	if (values.trial_number >= parameters.numTrialEachBlock){	
			if (values.block_number < 5){
				values.block_number += 1;	
			} else {
				values.block_number = 4;
			}
			
		}
]
/branch = [
	if (values.responseAndFeedbackCategory == "IRIF" || values.responseAndFeedbackCategory == "IRCF") {
		if (values.isThisTrialPractice == 1 && values.rightleftcorrect == "left") {
			return trial.choice;
		} else if (values.isThisTrialPractice == 1 && values.rightleftcorrect == "right") {
			return trial.choice;
			};
	};
	
	if (values.isThisTrialPractice == 0 && values.rightleftcorrect == "left") {
		if (values.trial_number == values.reversalnumber) {
			values.index_correctChoice = values.index_incorrectChoice;
			values.index_incorrectChoice = values.correct_holding;
		};
		
		if (values.trial_number < parameters.numTrialEachBlock) {
			return trial.choice;
		} else {
		} 
	} else if(values.isThisTrialPractice == 0 && values.rightleftcorrect == "right") {
		if (values.trial_number == values.reversalnumber) {
			values.index_correctChoice = values.index_incorrectChoice;
			values.index_incorrectChoice = values.correct_holding;
		};
		
		if (values.trial_number < parameters.numTrialEachBlock)  {
			return trial.choice;
		} else {
			
		}
	} 
]
</trial>

<trial reset_trial>
/ stimulusframes = [1 = Spacetocontinue, howyoudid]
/ trialduration = 1500
/ ontrialbegin = [
]
/ ontrialend = [
	values.numberoftimesleft = 0;
	values.numberoftimesright = 0;
	values.totalcorrect  =  expressions.totalcorrect;
	values.numbercorrectfeedback = 0;
	values.consecutivecorrect = 0;
	values.trial_number = 0;
	values.reversalnumber =  round(rand(14,26));
	if (values.isThisTrialPractice == 1) {
		values.percentTrialsCorrectFeedback_correctStim = 1;
		values.percentTrialsCorrectFeedback_incorrectStim = 0;
		list.CorrectPicture.reset();
	}
	else if (values.isThisTrialPractice == 0) {
		list.CorrectPicture.reset();
	};
	
	if (values.block_number > 4) {
		trial.thankyoutrial;
	}
]
</trial>

**************************************************************************************************************
Instructions for each experimental block
**************************************************************************************************************
<item beginExperimentInstruction>
/ 1 = "Great! Now that you've practiced, it's time to start the game."
</item>

<text beginExperimentInstruction>
/ items = beginExperimentInstruction
/ fontstyle = ("Arial", 3%, true, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (70%, 70%)
/ vjustify = center
/ valign = center
/ halign = center
/ select = sequence
</text>

<trial beginExperimentInstruction>
/ stimulusframes = [1=beginExperimentInstruction, spaceBarBeginTrial]
/ correctresponse = (57)
/ responsetime = 700
/ recorddata = false
/ ontrialend = [
	values.isThisTrialPractice = 0;
	values.numbercorrectfeedback = 0;
	values.block_number = 1;
]
</trial>

**************************************************************************************************************
Setting up picture probabilities and reversals
**************************************************************************************************************
<list CorrectPicture>
/ items = (1, 0)
/ itemprobabilities = (values.percentTrialsCorrectFeedback_correctStim, expressions.percentTrialsCorrectFeedback_correctStim)
/ poolsize = parameters.numTrialEachBlock
/ selectionmode = random
</list>

<list reversals>
/ items = (rand(3, 5))
/ poolsize = 6
/ replace = false
</list>


**************************************************************************************************************
End of Experiment
**************************************************************************************************************
<text thankyou>
/ items = ("Thank you for participating! ~n
You earned <%expressions.totalearnings%> cents for your performance in this task.")
/ fontstyle = ("Afrial", 4.5%, true, false, false, false, 5, 1)
/ position = (50%, 50%)
/ size = (80%, 80%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

<text exit>
/ items = ("Press spacebar to exit")
/ fontstyle = ("Arial", 3%, false, false, false, false, 5, 1)
/ position = (50%, 90%)
/ size = (80%, 5%)
/ vjustify = center
/ valign = center
/ halign = center
</text>

<trial thankyoutrial>
/ stimulusframes = [1 = thankyou, exit]
/ validresponse = ( 57)
/ correctresponse = ( 57) 
/ beginresponseframe = 0
/ recorddata = false
</trial>


**************************************************************************************************************
Experiment Blocks
**************************************************************************************************************


<block Experiment_block_start>
/ onblockbegin = [
	values.percentTrialsCorrectFeedback_correctStim = .7;
	values.percentTrialsCorrectFeedback_incorrectStim = .3;
	values.consecutivecorrect = 0;
	values.numbercorrect = 0;
	values.trial_number = 0;
	if (values.isThisTrialPractice == 1) {
		values.index_correctChoice = list.practiceitemnumbers.nextvalue;
		values.index_incorrectChoice = list.practiceitemnumbers.nextvalue;
		values.correct_holding = values.index_correctChoice;
	} else if (values.isThisTrialPractice == 0) {
		values.index_correctChoice = list.itemnumbers.nextindex;
		values.index_incorrectChoice = list.itemnumbers.nextindex;
		values.correct_holding = values.index_correctChoice;
		if (values.index_correctChoice == values.index_incorrectChoice) {
				values.index_incorrectChoice += 1;
		}
	};
]
/ trials = [
	1 = choice;
	2 = reset_trial;
	]

/ onblockend = [
	values.totalcorrect = expressions.totalcorrect;
	values.totalearnings = expressions.totalearnings;
	values.numbercorrectfeedback = 0;
	values.trial_number = 0;
	values.numberoftimesleft = 0;
	values.numberoftimesright= 0;

]


</block>

<block thankyou>
/ trials = [
	1 = thankyoutrial;
]
/ responsemode = correct
/ recorddata = false
</block>
**************************************************************************************************************
Defining the sequence of blocks for the experiment
**************************************************************************************************************
<expt>
/ blocks = [
	1 = practice_trial;
	2-6 = Experiment_block_start;
	7 = thankyou;
	
]	
</expt>
// 
