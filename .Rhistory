subject,
trial_response,
index_correctChoice_num,
fastRT
))))
#not seeing anything new here
#examine by accuracy and predT
hist(within_effects$rt) #interesting on the early side - what's up with that bin?
hist(within_effects$rt_inv) #interesting on the early side - what's up with that bin?
hist(within_effects$rt_log) #interesting on the early side - what's up with that bin?
histogram(~ rt | fastRT*trial_response, within_effects) #not different across side, lots of fast Rts?
histogram(~ rt | task_phase, within_effects) #similar across acquisiton/reversal
#looking at similar effects on acc side
histogram(~ isResponseCorrect | task_phase, within_effects) #a little more on the acq side
histogram(~ isResponseCorrect | fastRT, within_effects) #less accurate when fast, for sure
save(within_effects, file = 'base_effects_data.RData')
knitr::opts_chunk$set(echo = TRUE)
#load up
pacman::p_load(tidyverse, sjPlot, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, lme4, qualtRics, sjPlot, circular, pracma, cowplot, psych, lattice)
##### Load Data and setwd
ll = FALSE
if (ll == TRUE) {
home_directory <- "/proj/mnhallqlab/users/sophie/ReversalTask/"
data_dir <- file.path(paste0(home_directory, "data/"))
} else {
home_directory <- "~/github_repos/ReversalTask/"
data_dir <- file.path(paste0(home_directory, "data/"))
}
load(file = paste0(home_directory, 'base_effects_data.RData'))
within_effects <- within_effects %>%na.omit()
data = "over_50ms" #only_zeros
if (data == "only_zeros"){
data <- within_effects %>% filter(rt !=0)
#only cuts out rts that are actually 0 (meaning people were pressing at exactly 50ms): about 394 trials. This leaves things weird-looking
} else if(data == "over_50ms")  {
data <- within_effects %>% filter(rt >= 100)  # cuts out rts that are less than 50 (meaning people were pressing at 100ms of the stimuli being presented; These data looked the most normal) - this keeps 91% of the data in (cutting only another 400 trials or so): I don;'t want to totally lose peoplew ho are sticky, so I want to cut as little as possible
}
hist(data$rt_log)
range(data$rt)
mod0 <- lm(rt_log ~ total_trialnum, data = data); summary(mod0)
#is it worth the mlm?
mod1 <- lmer(rt_log ~ total_trialnum + (1 |subject), data = data); summary(mod1) #overall task progression
mod1.1 <- lmer(rt_log ~ block_number +  + (1 |subject), data = data); summary(mod1.1) #progression by block
plot(mod1.1)# that's an interesting shape, MNH care to comment? #same weird shape as before?
plot(mod1)# that's an interesting shape, MNH care to comment? #same weird shape as before?
plot(mod0)
AIC(mod0, mod1, mod1.1) #not really able to compare these, but mlm seems to fit way better
mod1.1 <- lmer(rt_log ~ block_number + trial_number + (1 |subject), data = data); summary(mod1.1) #progression by block
AIC(mod0, mod1, mod1.1) #not really able to compare these, but mlm seems to fit way better
plot(mod1.1)
plot(mod1)
mod2 <- lmer(rt_log ~ block_number + trial_number + prevRT + (1 |subject), data = data); summary(mod2) #big effects
AIC(mod2, mod1.1) #definitely worth adding prev_RT!
mod_matrix <- as.data.frame(model.matrix(mod2))
plot(fitted(mod2),resid(mod2)) # that's an interesting shape still dealing with confounding?
plot(resid(mod2), mod_matrix$prevRT)
plot(resid(mod2), mod_matrix$total_trialnum) #weirdly stratified?
mod2 <- lmer(rt_log ~ block_number + trial_number + prevRT + (1 |subject), data = data); summary(mod2) #big effects
AIC(mod2, mod1.1) #definitely worth adding prev_RT!
mod_matrix <- as.data.frame(model.matrix(mod2))
plot(fitted(mod2),resid(mod2)) # that's an interesting shape still dealing with confounding?
plot(resid(mod2), mod_matrix$prevRT)
plot(resid(mod2), mod_matrix$trial_number) #weirdly stratified?
plot(resid(mod2), mod_matrix$block_number) #weirdly stratified?
mod2 <- lmer(rt_log ~ block_number + trial_number + prevRT + (1 |subject), data = data); summary(mod2) #big effects
AIC(mod2, mod1.1) #definitely worth adding prev_RT!
mod_matrix <- as.data.frame(model.matrix(mod2))
plot(fitted(mod2),resid(mod2)) # that's an interesting shape still dealing with confounding?
plot(mod_matrix$prevRT, resid(mod2))
plot(mod_matrix$trial_number, resid(mod2)) #\
plot(mod_matrix$block_number, resid(mod2)) #
mod3 <- lmer(rt_log ~ block_number + trial_number + prevRT + task_phase + (1 |subject), data = data); summary(mod3) #big effects
AIC(mod2, mod3) #definitely worth adding prev_RT!
mod4 <- lmer(rt_log ~ block_number + trial_number + prevRT + task_phase + isResponseCorrect + (1 |subject), data = data); summary(mod4) #small effect - helps some
AIC(mod4, mod3)
plot(mod4)
plot(mod3)
plot(mod_matrix$isResponseCorrect, resid(mod2)) #relatively normal within bins - might be confounding
mod4 <- lmer(rt_log ~ block_number + trial_number + prevRT + task_phase + isResponseCorrect + (1 |subject), data = data); summary(mod4) #small effect - helps some
AIC(mod4, mod3)
plot(mod4) # ooh whats that silly little tail?
mod_matrix <- as.data.frame(model.matrix(mod4))
plot(fitted(mo42),resid(mod4)) # that's an interesting shape still dealing with confounding?
mod4 <- lmer(rt_log ~ block_number + trial_number + prevRT + task_phase + isResponseCorrect + (1 |subject), data = data); summary(mod4) #small effect - helps some
AIC(mod4, mod3)
plot(mod4) # ooh whats that silly little tail?
mod_matrix <- as.data.frame(model.matrix(mod4))
plot(fitted(mod4),resid(mod4)) # that's an interesting shape still dealing with confounding?
plot(mod_matrix$prevRT, resid(mod4)) #so really long RTs seem off - worth  recosidering trimming?
plot(mod_matrix$trial_number, resid(mod4)) #relatively normal within bins - might be part of reason for weirdness
plot(mod_matrix$block_number, resid(mod4)) #relatively normal within bins - might be confounding
plot(mod_matrix$task_phase, resid(mod4)) #relatively normal within bins - might be confounding
plot(mod_matrix$isResponseCorrect, resid(mod4)) #relatively normal within bins - might be confounding
sqrt(psych::smc(as.matrix(%>% select(-c(task_phase, #acquisition or reversal
sqrt(psych::smc(as.matrix(within_effects %>% select(-c(task_phase, #acquisition or reversal
))))
)
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable,
plotly, emmeans, data.table, dependlab,
lme4, car, AICcmodavg, gtools, lattice)
setwd("~/github_repos/ReversalTask/")
load("data/reversal_proc.RData")
within_effects <- reversal %>% # dataframe of within-subject effects: this is the main stuff we're using
select(subject,
rt, #reaction time
task_phase, #acquisition or reversal
index_correctChoice,
isResponseCorrect, #acc
isFeedbackAccurate, #did they get correct feedback
total_trialnum,
trial_number,
totalcorrect,
block_number, #successful catch (1) or missed (1)?
rightleftcorrect, # num of Trials after cp
correctstim_name, #absolute PE on previous trial
centsearned, #total trial number (NOTE: currently by block, that's wrong)
trial_response #did they choose left or right
) %>% mutate(prevRT = lag(rt),#last update
prev_choice = lag(trial_response),
fastRT = ifelse(rt <= 150, 1, 0),
rightleftcorrect_num = as.character(rightleftcorrect),
trial_response_num = as.character(trial_response),
ResponseCorrect_num = as.character(isResponseCorrect),
FeedbackAccurate_num = as.character(isFeedbackAccurate),
rt_log = log(rt),
rt_inv = -1/(rt)*1000)
within_effects <- within_effects %>% dplyr::mutate(rightleftcorrect_num = dplyr::recode(rightleftcorrect_num, "right" = 1, "left" = 2))
within_effects <- within_effects %>%  mutate(trial_response_num = dplyr::recode(trial_response_num, "right" = 1, "left" = 2, "noresponse" = 0))
within_effects <- within_effects %>% mutate(fastRT = ifelse(rt <= 150, "fast", "notfast"))
cor_heatmap(within_effects)
sqrt(psych::smc(as.matrix(within_effects %>% select(-c(task_phase, #acquisition or reversal
index_correctChoice,
isResponseCorrect, #acc
isFeedbackAccurate, #did they get correct feedbackrightleftcorrect, # num of Trials after cp
rightleftcorrect, # num of Trials after cp
correctstim_name, #absolute PE on previous trial
prev_choice,
subject,
trial_response,
index_correctChoice_num,
fastRT, rt_inv, rt)))))
sqrt(psych::smc(as.matrix(within_effects %>% select(-c(task_phase, #acquisition or reversal
index_correctChoice,
isResponseCorrect, #acc
isFeedbackAccurate, #did they get correct feedbackrightleftcorrect, # num of Trials after cp
rightleftcorrect, # num of Trials after cp
correctstim_name, #absolute PE on previous trial
prev_choice,
subject,
trial_response,
fastRT, rt_inv, rt)))))
Hmisc::rcorr(as.matrix(within_effects %>% select(-c(subject,
rt, #reaction time
task_phase, #acquisition or reversal
index_correctChoice,
isResponseCorrect, #acc
isFeedbackAccurate, #did they get correct feedback
total_trialnum,
trial_number,
totalcorrect,
block_number, #successful catch (1) or missed (1)?
rightleftcorrect, # num of Trials after cp
correctstim_name, #absolute PE on previous trial
centsearned, #total trial number (NOTE: currently by block, that's wrong)
trial_response #did they choose left or right
prev_choice,
prevRT
))))
Hmisc::rcorr(as.matrix(within_effects %>% select(-c(subject,
rt, #reaction time
task_phase, #acquisition or reversal
index_correctChoice,
isResponseCorrect, #acc
isFeedbackAccurate, #did they get correct feedback
total_trialnum,
trial_number,
totalcorrect,
block_number, #successful catch (1) or missed (1)?
rightleftcorrect, # num of Trials after cp
correctstim_name, #absolute PE on previous trial
centsearned, #total trial number (NOTE: currently by block, that's wrong)
trial_response #did they choose left or right
prev_choice,
prevRT))))
Hmisc::rcorr(as.matrix(within_effects %>% select(-c(subject,
rt, #reaction time
task_phase, #acquisition or reversal
index_correctChoice,
isResponseCorrect, #acc
isFeedbackAccurate, #did they get correct feedback
total_trialnum,
trial_number,
totalcorrect,
block_number, #successful catch (1) or missed (1)?
rightleftcorrect, # num of Trials after cp
correctstim_name, #absolute PE on previous trial
centsearned, #total trial number (NOTE: currently by block, that's wrong)
trial_response, #did they choose left or right
prev_choice))))
sqrt(psych::smc(as.matrix(within_effects %>% select(-c(subject,
rt, #reaction time
task_phase, #acquisition or reversal
index_correctChoice,
isResponseCorrect, #acc
isFeedbackAccurate, #did they get correct feedback
total_trialnum,
trial_number,
totalcorrect,
block_number, #successful catch (1) or missed (1)?
rightleftcorrect, # num of Trials after cp
correctstim_name, #absolute PE on previous trial
centsearned, #total trial number (NOTE: currently by block, that's wrong)
trial_response #did they choose left or right
prev_choice,
prevRT rt_inv)))))
sqrt(psych::smc(as.matrix(within_effects %>% select(-c(subject,
rt, #reaction time
task_phase, #acquisition or reversal
index_correctChoice,
isResponseCorrect, #acc
isFeedbackAccurate, #did they get correct feedback
total_trialnum,
trial_number,
totalcorrect,
block_number, #successful catch (1) or missed (1)?
rightleftcorrect, # num of Trials after cp
correctstim_name, #absolute PE on previous trial
centsearned, #total trial number (NOTE: currently by block, that's wrong)
trial_response #did they choose left or right
prev_choice,
prevRT, rt_inv)))))
sqrt(psych::smc(as.matrix(within_effects %>% select(-c(subject,
rt, #reaction time
task_phase, #acquisition or reversal
index_correctChoice,
isResponseCorrect, #acc
isFeedbackAccurate, #did they get correct feedback
total_trialnum,
trial_number,
totalcorrect,
block_number, #successful catch (1) or missed (1)?
rightleftcorrect, # num of Trials after cp
correctstim_name, #absolute PE on previous trial
centsearned, #total trial number (NOTE: currently by block, that's wrong)
trial_response, #did they choose left or right
prev_choice,
prevRT,
rt_inv)))))
sapply(within_effects, class)
sqrt(psych::smc(as.matrix(within_effects %>% select(-c(subject,
rt, #reaction time
task_phase, #acquisition or reversal
index_correctChoice,
isResponseCorrect, #acc
isResponseCorrect_num, #acc
isFeedbackAccurate, #did they get correct feedback
isFeedbackAccurate_num,
total_trialnum,
trial_number,
totalcorrect,
block_number, #successful catch (1) or missed (1)?
rightleftcorrect, # num of Trials after cp
correctstim_name, #absolute PE on previous trial
centsearned, #total trial number (NOTE: currently by block, that's wrong)
trial_response, #did they choose left or right
prev_choice,
prevRT,
rt_inv)))))
pacman::p_load(tidyverse, readr, janitor, ggplot2,wesanderson, cowplot, flextable,
plotly, emmeans, data.table, dependlab,
lme4, car, AICcmodavg, gtools, lattice)
setwd("~/github_repos/ReversalTask/")
load("data/reversal_proc.RData")
within_effects <- reversal %>% # dataframe of within-subject effects: this is the main stuff we're using
select(subject,
rt, #reaction time
task_phase, #acquisition or reversal
index_correctChoice,
isResponseCorrect, #acc
isFeedbackAccurate, #did they get correct feedback
total_trialnum,
trial_number,
totalcorrect,
block_number, #successful catch (1) or missed (1)?
rightleftcorrect, # num of Trials after cp
correctstim_name, #absolute PE on previous trial
centsearned, #total trial number (NOTE: currently by block, that's wrong)
trial_response #did they choose left or right
) %>% mutate(prevRT = lag(rt),#last update
prev_choice = lag(trial_response),
fastRT = ifelse(rt <= 150, 1, 0),
rightleftcorrect_num = as.character(rightleftcorrect),
trial_response_num = as.character(trial_response),
ResponseCorrect_num = as.character(isResponseCorrect),
FeedbackAccurate_num = as.character(isFeedbackAccurate),
rt_log = log(rt),
rt_inv = -1/(rt)*1000)
within_effects <- within_effects %>% dplyr::mutate(rightleftcorrect_num = dplyr::recode(rightleftcorrect_num, "right" = 1, "left" = 2))
within_effects <- within_effects %>%  mutate(trial_response_num = dplyr::recode(trial_response_num, "right" = 1, "left" = 2, "noresponse" = 0))
within_effects <- within_effects %>% mutate(fastRT = ifelse(rt <= 150, "fast", "notfast"))
cor_heatmap(within_effects)
sapply(within_effects, class)
within_effects <- within_effects %>% dplyr::mutate(rightleftcorrect_num = dplyr::recode(rightleftcorrect_num, "right" = 1, "left" = 2))
within_effects <- within_effects %>%  mutate(trial_response_num = dplyr::recode(trial_response_num, "right" = 1, "left" = 2, "noresponse" = 0))
within_effects <- within_effects %>% mutate(fastRT = ifelse(rt <= 150, "fast", "notfast"))
cor_heatmap(within_effects)
cor_heatmap(within_effects %>% select(-c(rt_log, rt_inv)))
Hmisc::rcorr(as.matrix(within_effects %>% select(-c(subject,
rt, #reaction time
task_phase, #acquisition or reversal
index_correctChoice,
isResponseCorrect, #acc
isFeedbackAccurate, #did they get correct feedback
total_trialnum,
trial_number,
totalcorrect,
block_number, #successful catch (1) or missed (1)?
rightleftcorrect, # num of Trials after cp
correctstim_name, #absolute PE on previous trial
centsearned, #total trial number (NOTE: currently by block, that's wrong)
trial_response, #did they choose left or right
prev_choice,
prevRT))))
sapply(within_effects, class)
Hmisc::rcorr(as.matrix(within_effects %>% select(-c(subject,task_phase,
index_correctChoice, isResponseCorrect,
isFeedbackAccurate,  rightleftcorrect,
correctstim_name, trial_response,
prev_choice, fastRT, ResponseCorrect_num,
FeedbackAccurate_num
))))
Hmisc::rcorr(as.matrix(within_effects %>% select(-c(subject,task_phase,
index_correctChoice, isResponseCorrect,
isFeedbackAccurate,  rightleftcorrect,
correctstim_name, trial_response,
prev_choice, fastRT, ResponseCorrect_num,
FeedbackAccurate_num, prevRT
))))
sapply(within_effects, class)
sqrt(psych::smc(as.matrix(within_effects %>% select(-c(subject,task_phase,
index_correctChoice, isResponseCorrect,
isFeedbackAccurate,  rightleftcorrect,
correctstim_name, trial_response,
prev_choice, fastRT, ResponseCorrect_num,
FeedbackAccurate_num, prevRT)) %>% na.omit())))
knitr::opts_chunk$set(echo = TRUE)
#load up
pacman::p_load(tidyverse, sjPlot, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, lme4, qualtRics, sjPlot, circular, pracma, cowplot, psych, lattice)
##### Load Data and setwd
ll = FALSE
if (ll == TRUE) {
home_directory <- "/proj/mnhallqlab/users/sophie/Cannon_Task/"
data_dir <- file.path(paste0(home_directory, "Data/"))
} else {
home_directory <- "~/github_repos/Cannon_Task/"
data_dir <- file.path(paste0(home_directory, "Data/"))
}
load(file = paste0(data_dir, 'base_effects_data.RData'))
within_effects <- within_effects %>%na.omit()
data = "over_50ms" #only_zeros
if (data == "only_zeros"){
data <- within_effects %>% filter(predT !=0)
#only cuts out rts that are actually 0 (meaning people were pressing at exactly 50ms): about 394 trials. This leaves things weird-looking
} else if(data == "over_50ms")  {
data <- within_effects %>% filter(predT >= 50)  # cuts out rts that are less than 50 (meaning people were pressing at 100ms of the stimuli being presented; These data looked the most normal) - this keeps 91% of the data in (cutting only another 400 trials or so): I don;'t want to totally lose peoplew ho are sticky, so I want to cut as little as possible
}
hist(data$predT_log)
range(data$predT_log)
mod0 <- lm(UP ~ PE, data = data); summary(mod0)
mod1 <- lmer(UP ~ PE + (1 |ID), data = data); summary(mod1)
mod1.1 <- lmer(UP ~ PE + (0 + PE |ID), data = data); summary(mod1.1)
#so clearly a massive effect of PE - big improvement in AIC with individual variation in PE
plot(mod1.1)# that's an interesting shape, MNH care to comment?
AIC(mod0, mod1, mod1.1)
#going really simple and looking at the UP~PE model.
mod_matrix_simple <- as.data.frame(model.matrix(mod1.1))
plot(resid(mod1.1), mod_matrix_simple$PE) #yeah... probably wouls have been worth looking at this in the beginning
#last thing: I know it was singular, but what does abs_PE bring to the table?
abs_mod <- lmer(UP ~ abs(PE) + (0 + abs(PE) |ID), data = data)
summary(abs_mod)
#fit is a lot worse, but what do residuals look like?
mod_matrix_abs <- as.data.frame(model.matrix(abs_mod))
plot(resid(abs_mod), mod_matrix_abs$PE) ## oh wow. That fixes.... alot? But the model is a way worse fit? Does it change the effects of the other predictors?
abs_mod_final <- lmer(UP ~ abs(PE) + prev_UP + cond + StaySwitch + cond*abs(PE) + (0 + abs(PE) |ID), data = data)
summary(abs_mod_final)
mod_matrix_abs_final <- as.data.frame(model.matrix(abs_mod_final))
plot(fitted(abs_mod_final),resid(abs_mod_final))  #mmm, still not amazing... better
plot(resid(abs_mod_final), mod_matrix_abs_final$`abs(PE)`)
plot(resid(abs_mod_final), mod_matrix_abs_final$prev_UP)
plot(resid(abs_mod_final), mod_matrix_abs_final$cond)
plot(resid(abs_mod_final), mod_matrix_abs_final$StaySwitch)
plot(resid(abs_mod_final), mod_matrix_abs_final$`cond*abs(PE)`) # this looks a lot better though
#so, the effect sizes seem much more reasonable and the distributions look a little better, but the overall fit is worse. What to do here??
plot(resid(abs_mod_final), mod_matrix_abs_final$`cond*abs(PE)`)
mod_matrix_abs_final$`cond*abs(PE)`
names(mod_matrix_abs_final)
plot(resid(abs_mod_final), mod_matrix_abs_final$`abs(PE):condODDBALL`)
hist(data$UP, data$PE)
hist(data$UP, data$PE)
hist(data$UP, data$PE)
knitr::opts_chunk$set(echo = TRUE)
#load up
pacman::p_load(tidyverse, sjPlot, readr, janitor, ggplot2,wesanderson, cowplot, flextable, plotly, emmeans, lme4, qualtRics, sjPlot, circular, pracma, cowplot, psych, lattice)
##### Load Data and setwd
ll = FALSE
if (ll == TRUE) {
home_directory <- "/proj/mnhallqlab/users/sophie/Cannon_Task/"
data_dir <- file.path(paste0(home_directory, "Data/"))
} else {
home_directory <- "~/github_repos/Cannon_Task/"
data_dir <- file.path(paste0(home_directory, "Data/"))
}
load(file = paste0(data_dir, 'base_effects_data.RData'))
within_effects <- within_effects %>%na.omit()
data = "over_50ms" #only_zeros
if (data == "only_zeros"){
data <- within_effects %>% filter(predT !=0)
#only cuts out rts that are actually 0 (meaning people were pressing at exactly 50ms): about 394 trials. This leaves things weird-looking
} else if(data == "over_50ms")  {
data <- within_effects %>% filter(predT >= 50)  # cuts out rts that are less than 50 (meaning people were pressing at 100ms of the stimuli being presented; These data looked the most normal) - this keeps 91% of the data in (cutting only another 400 trials or so): I don;'t want to totally lose peoplew ho are sticky, so I want to cut as little as possible
}
hist(data$predT_log)
range(data$predT_log)
hist(data$UP, data$PE)
View(data)
plot(data$UP, data$PE)
plot(data$UP, data$distmean)
#load up
pacman::p_load(tidyverse, lme4, car, AICcmodavg, gtools, lattice, cowplot, dependlab)
##### Load Data and setwd
ll = FALSE
if (ll == TRUE) {
home_directory <- "/proj/mnhallqlab/users/sophie/Cannon_Task/"
data_dir <- file.path(paste0(home_directory, "Data/"))
} else {
home_directory <- "~/github_repos/Cannon_Task/"
data_dir <- file.path(paste0(home_directory, "Data/"))
}
load(file = paste0(data_dir, 'br_data.RData'))
colnames(df)
install.packages(glmulti)
install.packages("glmulti")
library(glmulti)
--request
JAVA_HOME
within_effects <- df %>% # dataframe of within-subject effects: this is the main stuff we're using
select(ID,
UP,
cond, #condition: oddball or changepoint
distmean,
postOdd,
PE, #size of prediction error
abs_PE, # absolute size of prediction error
predT,#rt (specifically, time to make a prediction)
catch_miss, #successful catch (1) or missed (1)?
TAC, # num of Trials after cp
abs_prev_PE, #absolute PE on previous trial
totTrial, #total trial number (NOTE: currently by block, that's wrong)
StaySwitch, # was it an oddball/cp on this particular trial (1) or not (0)
) %>% mutate(prev_UP = lag(UP), #last update
fastpredT = ifelse(predT <= 100, 1, 0), # are the RTs fast?
bigPE = ifelse(PE >= 1 | PE <= -1, 1, 0)) #are the PEs big?
within_effects <- within_effects %>% mutate(prev_UP = lag(UP), #last update
fastpredT_fac = ifelse(predT <= 150, "fast", "notfast"), # are the RTs fast?
bigPE_fac = ifelse(bigPE == 1, "big", "notbig"),
StaySwitch_fac = ifelse(StaySwitch ==1, "CP", "notCP"),
predT_inv = -1/(predT)*1000,
predT_log = log(predT))
plot(data$distMean_rad)
plot(within_effects$distMean_rad, within_effects$UP)
plot(within_effects$distMean, within_effects$UP)
within_effects <- df %>% # dataframe of within-subject effects: this is the main stuff we're using
select(ID,
UP,
cond, #condition: oddball or changepoint
distMean_rad,
postOdd,
PE, #size of prediction error
abs_PE, # absolute size of prediction error
predT,#rt (specifically, time to make a prediction)
catch_miss, #successful catch (1) or missed (1)?
TAC, # num of Trials after cp
abs_prev_PE, #absolute PE on previous trial
totTrial, #total trial number (NOTE: currently by block, that's wrong)
StaySwitch, # was it an oddball/cp on this particular trial (1) or not (0)
) %>% mutate(prev_UP = lag(UP), #last update
fastpredT = ifelse(predT <= 100, 1, 0), # are the RTs fast?
bigPE = ifelse(PE >= 1 | PE <= -1, 1, 0)) #are the PEs big?
ids <- unique(df$ID)
cor_heatmap(within_effects)
#large correlations/relationships to note:
#-clearly the PE-UP relationship is significant. That's a huge effect
#Prev_UP and UP: would have thought it'd be more related/sticky: PE and prev_UP have same-ish relationship?
#stayswitch (i.e., changepoint) and TAC makes sense: should be inversely related
# PredT and totTrial - seems like later trials = faster RTs. Makes sense if people feel like they've learned location of mu
# positive corr. between fastRT and later trials.
# neg. corr. between fastRT and base RT - so people with more fastRTs have fast RTs overall
#bigPEs seem to happen when CPs happen (based on positive stayswitch and negative TAC relationship)
#smaller previous PEs occur farther away from changepoints (TAC)
#absolute PE is more interestingly related to CPs - do we throw it back in??
Hmisc::rcorr(as.matrix(within_effects %>%
mutate(cond = as.numeric(cond), catch_miss = as.numeric(catch_miss)) %>%
na.omit()))
#That fastpredT relationship is interesting. So are the TAC and catch_miss ones
within_effects <- within_effects %>% mutate(prev_UP = lag(UP), #last update
fastpredT_fac = ifelse(predT <= 150, "fast", "notfast"), # are the RTs fast?
bigPE_fac = ifelse(bigPE == 1, "big", "notbig"),
StaySwitch_fac = ifelse(StaySwitch ==1, "CP", "notCP"),
predT_inv = -1/(predT)*1000,
predT_log = log(predT))
plot(within_effects$distMean_rad, within_effects$UP)
plot(within_effects$distMean, within_effects$UP)
